package com.github.ryarnyah.requery.linked

import java.sql.*

class LinkedConnection(private val delegate: Connection) : Connection by delegate {

    override fun commit() {
        // Managed by micronaut transaction manager.
    }

    override fun rollback() {
        // Managed by micronaut transaction manager.
    }

    override fun rollback(savepoint: Savepoint?) {
        // Managed by micronaut transaction manager.
    }

    override fun setAutoCommit(autoCommit: Boolean) {
        // Managed by micronaut transaction manager.
    }

    override fun createStatement(): Statement {
        return LinkedStatement(delegate.createStatement(), this)
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement {
        return LinkedStatement(delegate.createStatement(resultSetType, resultSetConcurrency), this)
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement {
        return LinkedStatement(
            delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability),
            this
        )
    }

    override fun prepareStatement(sql: String?): PreparedStatement {
        return LinkedPreparedStatement(delegate.prepareStatement(sql), this)
    }

    override fun prepareStatement(sql: String?, autoGeneratedKeys: Int): PreparedStatement {
        return LinkedPreparedStatement(delegate.prepareStatement(sql, autoGeneratedKeys), this)
    }

    override fun prepareStatement(sql: String?, columnIndexes: IntArray?): PreparedStatement {
        return LinkedPreparedStatement(delegate.prepareStatement(sql, columnIndexes), this)
    }

    override fun prepareStatement(sql: String?, columnNames: Array<out String>?): PreparedStatement {
        return LinkedPreparedStatement(delegate.prepareStatement(sql, columnNames), this)
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement {
        return LinkedPreparedStatement(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency), this)
    }

    override fun prepareStatement(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): PreparedStatement {
        return LinkedPreparedStatement(
            delegate.prepareStatement(
                sql,
                resultSetType,
                resultSetConcurrency,
                resultSetHoldability
            ), this
        )
    }

    override fun prepareCall(sql: String?): CallableStatement {
        return LinkedCallableStatement(delegate.prepareCall(sql), this)
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int): CallableStatement {
        return LinkedCallableStatement(delegate.prepareCall(sql, resultSetType, resultSetConcurrency), this)
    }

    override fun prepareCall(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): CallableStatement {
        return LinkedCallableStatement(
            delegate.prepareCall(
                sql,
                resultSetType,
                resultSetConcurrency,
                resultSetHoldability
            ), this
        )
    }

    override fun createArrayOf(typeName: String?, elements: Array<out Any>?): java.sql.Array {
        return LinkedArray(delegate.createArrayOf(typeName, elements), this)
    }
}